# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

"""

from flask_ngrok import run_with_ngrok #install this module if you running via google colab
from flask import Flask, render_template
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, TextAreaField
from wtforms.validators import DataRequired
import torch
from transformers import BartTokenizer, BartForConditionalGeneration, BartConfig
from transformers import T5Tokenizer, T5ForConditionalGeneration, T5Config
BART_PATH = 'bart-large-cnn'
T5_PATH = 't5-base'

class SummarizationForm(FlaskForm):
    text = TextAreaField('Text',
                           validators=[DataRequired()])
    beam_search = StringField('Beam Search')
    num_words = StringField('Number of Words')
    submit = SubmitField('Generate')

bart_model = BartForConditionalGeneration.from_pretrained(BART_PATH)
bart_tokenizer = BartTokenizer.from_pretrained(BART_PATH)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

def bart_summarize(input_text, num_beams=4, num_words=50):
    input_text = str(input_text)
    input_text = ' '.join(input_text.split())
    inputs = bart_tokenizer.batch_encode_plus([input_text], max_length=1024, return_tensors='pt')
    summary_ids = bart_model.generate(inputs['input_ids'], num_beams=1, max_length=num_words, early_stopping=True)
    output = [bart_tokenizer.decode(g, skip_special_tokens=True, clean_up_tokenization_spaces=False) for g in summary_ids]
    return output[0]

app = Flask(__name__, root_path='/content/drive/My Drive/Colab Notebooks/Covid 19 Articles/text-summarizer-app')
app.config['SECRET_KEY'] = '5791628bb0b13ce0c676dfde280ba245'
run_with_ngrok(app)
print(app.root_path)

@app.route("/", methods=['GET', 'POST'])
def home():
  form = SummarizationForm()
  if form.validate_on_submit():
    sentence = form.text.data
    beam = int(form.beam_search.data)
    words = int(form.num_words.data)
    output = bart_summarize(sentence, beam, words)
    return render_template('index.html', form=form, response=output)
  return render_template('index.html', form=form)
  
if __name__ == '__main__':
  bart_model.to(device)
  bart_model.eval()
  app.run()

